{"version":3,"sources":["static/tomato.svg","utils.js","hooks/useFetch.js","contexts/AuthContext.js","hooks/usePositiveIntegerInput.js","modals/DayEditModal.js","components/Day.js","components/Week.js","components/Weeks.js","components/Stopwatch.js","modals/CustomizePomodoroModal.js","components/PomodoroTimer.js","components/TimerTargetSelect.js","components/TimerDisplay.js","modals/TargetEditModal.js","modals/TargetCreateModal.js","components/TargetSelect.js","components/Sidebar.js","modals/LoginModal.js","modals/RegisterModal.js","components/AccountButtons.js","components/Layout.js","App.js","index.js"],"names":["module","exports","mostRecentUTCSunday","d","temp","Date","setUTCDate","getUTCDate","getUTCDay","setUTCHours","localToSameDayUTC","getFullYear","getMonth","getDate","parseLocalDateString","year","month","day","newUTC","setUTCFullYear","setUTCMonth","fetchCall","url","a","extraOptions","defaultOptions","credentials","options","Object","assign","fetch","response","json","respJSON","console","log","useFetch","useState","data","setData","loading","setLoading","useEffect","controller","AbortController","signal","responseJSON","callAPI","abort","AuthContext","createContext","AuthContextProvider","props","loggedIn","setLoggedIn","Provider","value","children","usePositiveIntegerInput","settings","intString","setIntString","inputHTML","Form","Control","type","onChange","e","input","target","test","placeholder","Number","parseInt","DayEditModal","targetId","setTargets","setCurrentTarget","inputDate","label","name","addAmount","intInputHTML","handleDayEdit","process","processedTime","id","JSON","stringify","getTime","workTime","timeZone","Intl","DateTimeFormat","resolvedOptions","method","headers","body","success","updatedTarget","targets","_id","map","show","setShow","style","padding","height","onClick","Modal","onHide","keyboard","animation","Header","closeButton","Title","toLocaleDateString","Body","InputGroup","Append","Button","width","variant","Day","currentTarget","workDay","inMonth","useContext","dayRef","useRef","pulseRef","color","clientHeight","current","diameter","offset","Math","floor","bottom","left","className","ref","position","overflow","seconds","min","secToMin","hours","remainingMin","secToDisplay","Week","workWeek","sunday","viewedMonth","weeksToDisplay","isCompleted","weekStyle","borderLeft","backgroundColor","zIndex","dayDates","dayOfWeek","i","push","setDate","dayComponents","date","extra","workDays","days","length","sameYear","getUTCFullYear","sameMonth","getUTCMonth","sameDay","key","uuidv4","Weeks","workWeeks","setWorkWeeks","pureDates","weeks","week","firstSunday","previousSunday","startIndex","arr","item","lessThan","lo","hi","mid","bisectLeft","workWeeksInView","currentIndex","lastSunday","WEEKS_TO_DISPLAY","Error","workWeekSunday","sundayDates","copy","weekComponents","j","calendarSunday","defaultProps","workWeekUTCSunday","calendarSundayUTC","completionCutoff","weeklyTargetTime","reduce","sum","currentDayDoc","getDay","setHours","Stopwatch","timer","timerStyle","selectedTimerTargetId","display","centiseconds","setCentiseconds","ticking","setTicking","tick","ticker","setInterval","clearInterval","logTime","secondsWorked","now","alert","remainingSeconds","remainingMinutes","minutes","displayTime","ButtonGroup","CustomizePomodoroModal","setStartingWorkCentiseconds","setStartingRestCentiseconds","minuteWorkValue","minuteWorkInput","minuteRestValue","minuteRestInput","data-tip","data-place","Group","Label","Footer","restStartTime","PomodoroTimer","startingWorkCentiseconds","startingRestCentiseconds","isWorkMode","setIsWorkMode","addTimeToAPI","reset","useCallback","TimerTargetSelect","setSelectedTimerTargetId","setOptions","optionHTML","title","controlId","as","timerReducer","state","action","TimerDisplay","useReducer","dispatch","src","require","alt","selectedTar","footerStyling","justifyContent","TargetEditModal","notes","titleInput","setTitleInput","notesInput","setNotesInput","weeklyTargetTimeInput","setWeeklyTargetTimeInput","setSuccess","feedback","handleEdits","preventDefault","handleDelete","filter","fontSize","onSubmit","defaultValue","Text","rows","TargetCreateModal","handleCreate","required","TargetSelect","targetEntries","setTargetEntries","selectTarget","dataset","targetid","chosenTarget","generateJSX","editForms","checkBoxIndex","currentTargetId","index","Check","data-targetid","defaultChecked","checkbox","form","alignItems","Col","sm","Sidebar","LoginModal","username","setUsername","password","setPassword","handleLogin","RegisterModal","handleRegistration","htmlFor","AccountButtons","handleLogout","Layout","retrieveTargets","today","n","undefined","numToMonth","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95f4318f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato.d2e94b4c.svg\";","import React, { useState } from 'react';\r\n\r\n/**\r\n * Returns a Date object that is at the most recent UTC sunday with zeroed time.\r\n * @param {Date} d \r\n * @return {Date} - Date object representing UTC Sunday with time 00:00:00\r\n */\r\nexport function mostRecentUTCSunday(d) {\r\n    let temp = new Date(d);\r\n    temp.setUTCDate(temp.getUTCDate() - temp.getUTCDay());\r\n    temp.setUTCHours(0, 0, 0, 0);\r\n    return temp;\r\n}\r\n\r\nexport function localToSameDayUTC(d) {\r\n    let [year, month, day] = parseLocalDateString(d);\r\n\r\n    // Copy Date\r\n    let newUTC = new Date();\r\n    newUTC.setUTCFullYear(year);\r\n    newUTC.setUTCMonth(month - 1);  // Months are 0-11 for Date objects but 1-12 irl.\r\n    newUTC.setUTCDate(day);\r\n\r\n    // Zero Time\r\n    newUTC.setUTCHours(0, 0, 0, 0);\r\n    return newUTC;\r\n}\r\n\r\n/** Returns the Month, Day, Year of local time as an array\r\n * @param {Date} d - A date initialized to some timezone through utcToZonedTime(),\r\n * @return {[Year, Month, Day]} \r\n */\r\nfunction parseLocalDateString(d) {\r\n    return [d.getFullYear(), d.getMonth() + 1, d.getDate()];\r\n}\r\n\r\nexport function bisectLeft(arr, item, lessThan) {\r\n    let lo = 0;\r\n    let hi = arr.length;\r\n\r\n    while (lo < hi) {\r\n        let mid = (lo + hi) >> 1;\r\n        if (lessThan(arr[mid], item)) {\r\n            lo = mid + 1;\r\n        } else {\r\n            hi = mid\r\n        }\r\n    }\r\n    return lo\r\n}\r\n\r\n// Can't use hooks like 'useFetch' within function calls. This is a normal fetch.\r\nexport async function fetchCall(url, extraOptions = {}) {\r\n    try {\r\n        // Initialize Fetch Options\r\n        let defaultOptions = {\r\n            credentials: 'include'\r\n        }\r\n        let options = Object.assign(defaultOptions, extraOptions);\r\n\r\n        // Make the fetch call\r\n        const response = await fetch(url, options);\r\n        const respJSON = await response.json();\r\n        return respJSON;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return error;\r\n    }\r\n}\r\n\r\nexport function numToMonth(n) {\r\n    let month;\r\n    switch (n) {\r\n        case 1:\r\n            month = 'January';\r\n            break;\r\n        case 2:\r\n            month = 'February'\r\n            break;\r\n        case 3:\r\n            month = 'March';\r\n            break;\r\n        case 4:\r\n            month = 'April'\r\n            break;\r\n        case 5:\r\n            month = 'May';\r\n            break;\r\n        case 6:\r\n            month = 'June'\r\n            break;\r\n        case 7:\r\n            month = 'July';\r\n            break;\r\n        case 8:\r\n            month = 'August'\r\n            break;\r\n        case 9:\r\n            month = 'September';\r\n            break;\r\n        case 10:\r\n            month = 'October'\r\n            break;\r\n        case 11:\r\n            month = 'November';\r\n            break;\r\n        case 12:\r\n            month = 'December'\r\n            break;\r\n        default:\r\n            month = undefined\r\n    }\r\n    return month;\r\n}\r\n\r\n/**\r\n * Date objects return months in the range of 0-11 which is unintuitive. This is a wrapper function that'll let me\r\n * get around this and instead return 1-12.\r\n * @param {Date} d - date whose month is to be extracted\r\n * @returns {Number} An integer from 1 - 12\r\n */\r\nexport function getMonth(d) {\r\n    return d.getMonth() + 1;\r\n}\r\n\r\n\r\n/* https://stackoverflow.com/questions/55757761/handle-an-input-with-react-hooks\r\n    A reusable way of handling the state of forms\r\n\r\n    i.e. {id: 'username-input', label: 'Username:', type: 'text'}\r\n*/\r\nexport function useInput(options) {\r\n    const [value, setValue] = useState(\"\");\r\n    const input = (\r\n        <>\r\n            <label htmlFor={options.id}>{options.label}</label><br />\r\n            <input id={options.id} value={value} onChange={e => setValue(e.target.value)} type={options.type} />\r\n        </>\r\n    );\r\n    return [value, input];\r\n}","import { useState, useEffect } from \"react\";\r\n\r\n// Reuseable fetch structure from Ben Awad's Youtube\r\n// Abort Controller Info: https://dev.to/pallymore/clean-up-async-requests-in-useeffect-hooks-90h\r\nexport const useFetch = (url, extraOptions) => {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const controller = new AbortController();\r\n        const signal = controller.signal;\r\n\r\n        // Default options can't be initialized in method definition b/c each call\r\n        // triggers infinite rerenders.\r\n        let defaultOptions = {\r\n            credentials: 'include',\r\n            signal: signal\r\n        };\r\n\r\n        let options = Object.assign(defaultOptions, extraOptions);\r\n\r\n        const callAPI = async () => {\r\n            try {\r\n                const response = await fetch(url, options);\r\n                const responseJSON = await response.json();\r\n                setData(responseJSON);\r\n                setLoading(false);\r\n                console.log('Data Received:', responseJSON)\r\n            } catch (error) {\r\n                // Aborting throws an error. We can can ignore the console log with the below code if desired.\r\n                // if (!controller.signal.aborted){\r\n                //     console.log(error);\r\n                // }\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        callAPI(url);\r\n\r\n        // Clean up function\r\n        return () => {\r\n            console.log('Aborting!');\r\n            controller.abort();\r\n        }\r\n    }, [url, extraOptions]);\r\n    // url, options, controller\r\n\r\n    return { data, loading };\r\n}\r\n\r\nexport default useFetch;","import React, { createContext, useState } from 'react';\r\nimport useFetch from '../hooks/useFetch';\r\nimport { useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextProvider = (props) => {\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n\r\n    // Check if we're logged in on startup\r\n    const {data, loading} = useFetch('/api/loggedIn');\r\n\r\n    // If we're done loading an\r\n    useEffect(() => {\r\n        if (!loading && data.loggedIn) {\r\n            console.log('Auth Context Auto Login:', data, loading);\r\n            setLoggedIn(true);\r\n        }\r\n    }, [data, loading]);\r\n    return (\r\n        <AuthContext.Provider value={{ loggedIn: loggedIn, setLoggedIn: setLoggedIn }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContextProvider;","import React, {useState} from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\n/**\r\n * Returns a reusable input that makes use of input:text rather than input:number to ensure that users can only enter\r\n * positive integer values.\r\n * \r\n * Empty inputs will return NaN\r\n * \r\n * @param {Object} settings - An object containing the mandatory data to construct the input HTML\r\n */\r\nfunction usePositiveIntegerInput(settings){\r\n    const [intString, setIntString] = useState('');\r\n    \r\n    // Checks if a string is composed entirely of integers or blank\r\n    function isValidIntegerInput(input) {\r\n        if (input === ''){\r\n            return true;\r\n        }\r\n\r\n        return /^[1-9]\\d*$/.test(input);\r\n    }\r\n\r\n    // Make sure only numbers are ever entered\r\n    const handleChange = (e) => {\r\n        if (isValidIntegerInput(e.target.value)) {\r\n            setIntString(e.target.value)\r\n        }\r\n    }\r\n\r\n    let inputHTML = (\r\n        // <Form.Group controlId={`integer-input-${settings.label}`}>\r\n        //     <Form.Label>{settings.label}</Form.Label>\r\n        //     <Form.Control type=\"text\" value={intString} onChange={handleChange}/>\r\n        // </Form.Group>\r\n        <Form.Control type=\"text\" value={intString} onChange={handleChange} placeholder={settings.placeholder}/>\r\n    )\r\n    \r\n    // A blank input returns NaN, make sure to account for that\r\n    let integer = Number.parseInt(intString);\r\n    return [integer, inputHTML];\r\n}\r\n \r\nexport default usePositiveIntegerInput;","import React, { useState } from 'react';\r\nimport { Button, Modal, Form, InputGroup } from 'react-bootstrap';\r\n\r\nimport usePositiveIntegerInput from '../hooks/usePositiveIntegerInput';\r\nimport { fetchCall } from '../utils';\r\n\r\n// Todo: Pass down these props all the way from the component, Layout?\r\nfunction DayEditModal(props) {\r\n    const { targetId, setTargets, setCurrentTarget, inputDate } = props;\r\n\r\n    // Form Logic\r\n    \r\n\r\n    // Use the custom hook for the integer only form\r\n    let addSettings = {\r\n        label: 'Add Time (min)',\r\n        name: 'add-amount',\r\n        placeholder: 'Add/Subtract Time (min)'\r\n    }\r\n    const [addAmount, intInputHTML] = usePositiveIntegerInput(addSettings);\r\n\r\n    // I don't actually want to always update an existing day. I want to also be able to generate a day if I add time to an empty day.\r\n    // I should just reuse the Day-POST portion of my API and not call the Day-PUT\r\n    const handleDayEdit = async (e) => {\r\n        let url = process.env.REACT_APP_API_HOST + `/api/days/${targetId}`;\r\n\r\n        let processedTime = addAmount * 60;         // Convert minutes -> seconds\r\n\r\n        // Add and subtract are the same, just multiply by -1 in case of subtract\r\n        if (e.target.id === 'sub-day-btn') {\r\n            processedTime *= -1;\r\n            console.log('Subtract');\r\n        }\r\n\r\n        let data = JSON.stringify({\r\n            inputDate: inputDate.getTime(),         // in ms since unix epoch\r\n            workTime: processedTime,\r\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n        });\r\n        let options = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: data\r\n        }\r\n        let response = await fetchCall(url, options);\r\n        console.log('DayEditModal response :>> ', response);\r\n        if (response.success) {\r\n            // Update the local state of targets. Idk why but it's not triggering rerender\r\n            let updatedTarget = response.target;\r\n            setTargets(targets => {\r\n                let id = updatedTarget._id;\r\n                let updatedCopy =\r\n                    targets.map(target => {\r\n                        if (id === target._id) {\r\n                            return updatedTarget;\r\n                        } else {\r\n                            return target;\r\n                        }\r\n                    });\r\n                return updatedCopy;\r\n            });\r\n            setCurrentTarget(updatedTarget);    // Test this\r\n        } else {\r\n            // Todo: Error Message if failed to add time\r\n        }\r\n    }\r\n\r\n    // Modal Logic\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => {\r\n        setShow(true);\r\n    }\r\n\r\n    // Must be able to both edit an existing day and create a day.\r\n    return (\r\n        <>\r\n            <div style={{ padding: '0', height: '100%' }} onClick={handleShow}>\r\n                {props.children}\r\n            </div>\r\n\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                keyboard={false}\r\n                animation={false}   // Must set animation to false. Otherwise, react-bootstrap throws a deprecation warning.\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Change Time: {inputDate.toLocaleDateString()}</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    <h6>Missed some time? Edit Your Time Here</h6>\r\n                    <Form>\r\n                        <InputGroup>\r\n                            {intInputHTML}\r\n                            <InputGroup.Append>\r\n                                <Button style={{width: '50%'}} id='add-day-btn' variant=\"outline-secondary\" onClick={handleDayEdit}>\r\n                                    +\r\n                                </Button>\r\n                                <Button style={{width: '50%'}} id='sub-day-btn' variant=\"outline-secondary\" onClick={handleDayEdit}>\r\n                                    -\r\n                                </Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </Form>\r\n\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DayEditModal;","import React from 'react';\r\n\r\nimport '../css/Day.css';\r\nimport '../css/PulsingCircle.css';\r\nimport DayEditModal from '../modals/DayEditModal';\r\nimport { useEffect, useRef, useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nconst Day = ({ currentTarget, setCurrentTarget, setTargets, workDay, day, inMonth }) => {\r\n    const {loggedIn} = useContext(AuthContext);\r\n\r\n    let dayRef = useRef(null);\r\n    let pulseRef = useRef(null);\r\n\r\n    let style = {};\r\n\r\n    // Change the color of days that are not in the month\r\n    if (!inMonth) {\r\n        style.color = 'silver';\r\n    }\r\n\r\n    // Apply styling to workdays\r\n    let pulsingStyle = {\r\n        height: 0,\r\n        width: 0,\r\n        bottom: 0,\r\n        left: 0\r\n    }\r\n\r\n    // I want the circle to be aware of how large it is rendered and scale the css to its display height.\r\n    useEffect(() => {\r\n        if (workDay && loggedIn) {\r\n            // Make Circle Diameter scale linearly with clientHeight\r\n            // diameter = ([maxDiameter - minDiameter] / [timeToMax]) x + minDiameter\r\n            const clientHeight = dayRef.current.clientHeight;\r\n            const workTime = workDay.workTime           // Stored as seconds in API\r\n\r\n            const minDiameter = .4;                     // Minimum diameter of the circle is 40% of clientHeight\r\n            const maxDiameter = 1.8;                    // Maximum diameter of the circle is 180% of clientHeight\r\n            const timeToMax = 8 * 60 * 60;              // Time to reach maxDiameter in seconds\r\n            const slope = (maxDiameter - minDiameter) / (timeToMax);\r\n\r\n            // Resultant dimensions. Currently styled such that the circle is centered in bottom left corner.\r\n            let diameterPercent = slope * workTime + minDiameter;\r\n            let diameter = diameterPercent * clientHeight;\r\n            let offset = Math.floor(diameter / 2);\r\n\r\n            diameter += 'px';\r\n            offset = offset * -1 + 'px';\r\n\r\n            // Set the attributes. \r\n            pulseRef.current.style.height = diameter;\r\n            pulseRef.current.style.width = diameter;\r\n            pulseRef.current.style.bottom = offset;\r\n            pulseRef.current.style.left = offset;\r\n        }\r\n    })\r\n\r\n    return (\r\n        <td className='day-cell' ref={dayRef} style={{ ...style, position: 'relative', overflow: 'hidden' }}>\r\n            <DayEditModal\r\n                setTargets={setTargets}\r\n                targetId={currentTarget ? currentTarget._id : null}\r\n                setCurrentTarget={setCurrentTarget}\r\n                inputDate={day}\r\n            >\r\n                <div className='day' style={{ height: '100%', width: '100%' }}>\r\n                    <div className='day-date-header'>{day.getDate()}</div>\r\n                    {workDay && loggedIn ? (<div>{secToDisplay(workDay.workTime)}</div>) : null}\r\n                </div>\r\n            </DayEditModal>\r\n            {workDay && loggedIn ? <div className=\"pulsing-circle\" ref={pulseRef} style={pulsingStyle}></div> : null}\r\n        </td>\r\n    );\r\n}\r\n\r\nexport default Day;\r\n\r\n\r\nfunction secToMin(seconds) {\r\n    return Math.floor(seconds / 60);\r\n}\r\n\r\nfunction secToDisplay(seconds) {\r\n    let min = secToMin(seconds);\r\n\r\n    // Display minutes if less than one hour\r\n    if (min < 60) {\r\n        return `${min} min`;\r\n    }\r\n\r\n    // Numerically Calculate the number of hours including decimal\r\n    let hours = Math.floor(min / 60);\r\n    let remainingMin = min % 60;\r\n\r\n    return `${hours} hr ${remainingMin} min`;\r\n}","import React from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Day from './Day';\r\nimport '../css/Week.css'\r\nimport { getMonth } from '../utils';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nconst daysInWeek = 7;\r\n\r\nconst Week = ({ setTargets, currentTarget, setCurrentTarget, workWeek, sunday, viewedMonth, weeksToDisplay, isCompleted }) => {\r\n    const {loggedIn} = useContext(AuthContext);\r\n\r\n    let weekStyle = {\r\n        height: '' + (100 / weeksToDisplay) + '%'\r\n    }\r\n    if (isCompleted && loggedIn){\r\n        weekStyle.borderLeft = '5px solid rgba(226, 194, 255, 1)'\r\n        // weekStyle.borderTop = '5px solid rgba(226, 194, 255, 1)'\r\n        // weekStyle.borderBottom = '5px solid rgba(226, 194, 255, 1)'\r\n        // weekStyle.borderRight = '5px solid rgba(226, 194, 255, 1)'\r\n\r\n        weekStyle.backgroundColor = '#A1F7E9'\r\n        weekStyle.backgroundColor = 'rgba(161, 247, 233, 0.5)'\r\n        weekStyle.zIndex = '10';\r\n    }\r\n\r\n    // No workWeek logic\r\n    let dayDates = [];\r\n    let dayOfWeek = new Date(sunday);\r\n    for (let i = 0; i < daysInWeek; i++) {\r\n        dayDates.push(new Date(dayOfWeek));       // JavaScript arrays store objects by reference. Must make a new Date object\r\n        dayOfWeek.setDate(dayOfWeek.getDate() + 1);\r\n    }\r\n\r\n    let dayComponents = dayDates.map(date => {\r\n        // Check if the date is within the viewedMonth or not to apply styling\r\n        let extra = {\r\n            inMonth: false,\r\n            workDay: null\r\n        }\r\n\r\n        // Whether or not to apply grayed out styling for out of month days\r\n        if (getMonth(date) === viewedMonth) {\r\n            extra.inMonth = true;\r\n        }\r\n\r\n        // Perform O(n^2) comparisons. Should be ok, n <= 7.\r\n        // Yes workWeek logic\r\n        if (workWeek) {\r\n            // Construct an array parallel to workWeek.days of just the dates.\r\n            let workDays = workWeek.days.map(day => {\r\n                return new Date(day.date);\r\n            });\r\n\r\n            for (let i = 0; i < workDays.length; i++) {\r\n                const workDay = workDays[i];\r\n                let sameYear = workDay.getUTCFullYear() === date.getFullYear();\r\n                let sameMonth = workDay.getUTCMonth() === date.getMonth();\r\n                let sameDay = workDay.getUTCDate() === date.getDate();\r\n\r\n                if (sameYear && sameMonth && sameDay){\r\n                    extra.workDay = workWeek.days[i];   // Pass in the API date object, not just the date.\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return <Day setTargets={setTargets} currentTarget={currentTarget} setCurrentTarget={setCurrentTarget} day={date} key={uuidv4()} {...extra} />;\r\n    })\r\n\r\n    return (\r\n\r\n        <tr className='week' style={weekStyle}>\r\n            {dayComponents}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Week;","import React from 'react';\r\nimport Week from './Week';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport '../css/Weeks.css'\r\nimport { bisectLeft, mostRecentUTCSunday, localToSameDayUTC } from '../utils';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// Display 6 weeks\r\nconst WEEKS_TO_DISPLAY = 6\r\n\r\nconst Weeks = ({ setTargets, currentTarget, setCurrentTarget, date, viewedMonth }) => {\r\n    const [workWeeks, setWorkWeeks] = useState([]);\r\n\r\n    // Inject the work days of currentTarget if they occur within the current view.\r\n    // Rerender weeks component if the currentTarget/date changes.\r\n    useEffect(() => {\r\n        // Todo: Bug within this function. Does not include the last week.\r\n\r\n        if (currentTarget) {\r\n            // Use bisectLeft to perform binary search to find the starting position.\r\n            function lessThan(week, firstSunday) {\r\n                // Use some day w/in the week to calculate that week's sunday\r\n                const someDayOfWeek = week.days[0].date;\r\n                let sundayOfWeek = mostRecentUTCSunday(someDayOfWeek);\r\n\r\n                return sundayOfWeek < firstSunday;\r\n            }\r\n\r\n            \r\n            let pureDates = currentTarget.weeks.map(week => {\r\n                return week.days[0].date;\r\n            })\r\n            console.log('currentTarget.weeks Dates :>> ', pureDates);\r\n\r\n            // Assumption: if 1/31/2020 in UTC is a Sunday, 1/31/2020 is a Sunday in all local timezones\r\n            let weeks = currentTarget.weeks;\r\n            let firstSunday = previousSunday(date);\r\n            firstSunday = localToSameDayUTC(firstSunday);               // Normalize the local Sunday to a UTC date.\r\n            let startIndex = bisectLeft(weeks, firstSunday, lessThan);  // Use 'binary search' to find start in O(log n)\r\n\r\n            // Immediately exit if bisectLeft tells us out of bounds\r\n            if (startIndex >= weeks.length) {\r\n                setWorkWeeks([]);   // No work weeks fall in the current view. \r\n                return;\r\n            }\r\n\r\n            // Otherwise check if weeks[i] contains day(s) that fall into the current view\r\n            let workWeeksInView = [];\r\n            let currentIndex = startIndex;\r\n            let lastSunday = new Date(firstSunday.getFullYear(), firstSunday.getMonth(), firstSunday.getDate());\r\n            lastSunday.setDate(lastSunday.getDate() + ((WEEKS_TO_DISPLAY) * 7));\r\n            lastSunday = mostRecentUTCSunday(localToSameDayUTC(lastSunday));     // Normalize local -> UTC\r\n\r\n            // Sanity Check: Is lastSundayNormalized actually a UTC Sunday?\r\n            if (lastSunday.getUTCDay() !== 0) {\r\n                throw Error('Critical Error: lastSundayNormalized is not a Sunday');\r\n            }\r\n\r\n            while (currentIndex < weeks.length) {\r\n                let workWeekDay = weeks[currentIndex].days[0].date;\r\n                // If the sunday of a current week is ahead of a local date, break.\r\n\r\n                // Check if the current week's normalized sunday date is within the range of our view.\r\n                let workWeekSunday = mostRecentUTCSunday(workWeekDay);\r\n                let afterStartOfView = workWeekSunday >= firstSunday;\r\n                let beforeEndOfView = workWeekSunday <= lastSunday;\r\n\r\n                if (afterStartOfView && beforeEndOfView) {\r\n                    workWeeksInView.push(weeks[currentIndex]);\r\n                    currentIndex++;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Sanity Check: There are no more weeksInView than are possible \r\n            if (workWeeksInView.length > WEEKS_TO_DISPLAY) {\r\n                throw Error('Critical Error: More work weeks are considered are view than is allowed.');\r\n            }\r\n\r\n            setWorkWeeks(workWeeksInView);\r\n        }\r\n    }, [currentTarget, date]);\r\n\r\n    // Calendar Skeleton Logic -------------------------------\r\n    // The passed date is always on the first day of the month\r\n    // Get the dates of the Sundays of 6 contiguous weeks\r\n    let sundayDates = [];\r\n    let sunday = previousSunday(date);\r\n\r\n    for (let i = 0; i < WEEKS_TO_DISPLAY; i++) {\r\n        sundayDates.push(sunday);\r\n\r\n        let copy = new Date(sunday);\r\n        copy.setDate(copy.getDate() + 7);\r\n        sunday = copy;\r\n    }\r\n\r\n    // Work Week injection. Iterating over two arrays: workWeeks and sundayDates.\r\n    let weekComponents = [];\r\n    let j = 0;      // Pointer for indexing workWeeks\r\n    for (let i = 0; i < sundayDates.length; i++) {\r\n        const calendarSunday = sundayDates[i];\r\n        let defaultProps = {\r\n            key : uuidv4(),\r\n            sunday : calendarSunday,\r\n            viewedMonth : viewedMonth,\r\n            weeksToDisplay : WEEKS_TO_DISPLAY,\r\n            setTargets: setTargets,\r\n            currentTarget: currentTarget,\r\n            setCurrentTarget: setCurrentTarget\r\n        }\r\n\r\n        if (j < workWeeks.length) {\r\n            let workWeek = workWeeks[j];\r\n            let workWeekUTCSunday = mostRecentUTCSunday(new Date(workWeek.days[0].date));\r\n            let calendarSundayUTC = localToSameDayUTC(calendarSunday);\r\n\r\n            if (workWeekUTCSunday.getTime() === calendarSundayUTC.getTime()) {\r\n                // Accumulate all the workTime in a workWeek to see if we should apply completion styling\r\n                let completionCutoff = workWeek.weeklyTargetTime * 60 * 60; // hr -> seconds\r\n                let totalWorkTime = workWeek.days.reduce((sum, currentDayDoc) => {\r\n                    let currentWorkTime = currentDayDoc.workTime;\r\n                    return sum + currentWorkTime;\r\n                }, 0);\r\n\r\n\r\n                // custom styling on week completion\r\n                let isCompleted = false;\r\n                if (totalWorkTime > completionCutoff){\r\n                    isCompleted = true;\r\n                }\r\n\r\n                weekComponents.push(\r\n                    <Week workWeek={workWeek} {...defaultProps} isCompleted={isCompleted}/>\r\n                )\r\n                j++;\r\n            }else{\r\n                weekComponents.push(\r\n                    <Week {...defaultProps} />\r\n                )\r\n            }\r\n        }else{\r\n            weekComponents.push(\r\n                <Week {...defaultProps} />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <table className='calendar'>\r\n            <thead className='calendar-header'>\r\n                <tr className='day-names'>\r\n                    <th className='day-name'>Sun</th>\r\n                    <th className='day-name'>Mon</th>\r\n                    <th className='day-name'>Tue</th>\r\n                    <th className='day-name'>Wed</th>\r\n                    <th className='day-name'>Thu</th>\r\n                    <th className='day-name'>Fri</th>\r\n                    <th className='day-name'>Sat</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody className='weeks'>\r\n                {weekComponents}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Weeks;\r\n\r\n/**\r\n * From: https://stackoverflow.com/questions/12791378/get-the-most-recently-occurring-sunday\r\n * Input a Date object and get the Date object of the most recent Sunday\r\n * @param {Date} d - Date object you would like to find the previous Sunday of\r\n * @return {Date} Returns a new date object corresponding to last Sunday\r\n */\r\nfunction previousSunday(d) {\r\n    let copy = new Date(d);\r\n    copy.setDate(copy.getDate() - copy.getDay());\r\n    copy.setHours(0, 0, 0, 0);  // Normalize time by setting all of it to 0\r\n    return copy;\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { Button, ButtonGroup } from 'react-bootstrap';\r\n\r\nimport {fetchCall} from '../utils';\r\n\r\nconst initialCentiseconds = 0;\r\n\r\nconst Stopwatch = ({ setTargets, currentTarget, setCurrentTarget, timer, selectedTimerTargetId }) => {\r\n    // Only display this timer if it's selected. Else run in background.\r\n    let timerStyle = { display: 'none' };\r\n    if (timer === 'Stopwatch') {\r\n        timerStyle = { display: 'block' }\r\n    }\r\n\r\n    const [centiseconds, setCentiseconds] = useState(initialCentiseconds);\r\n    const [ticking, setTicking] = useState(false);\r\n\r\n    /* \r\n    https://stackoverflow.com/questions/53024496/state-not-updating-when-using-react-state-hook-within-setinterval\r\n    Issue:\r\n        Just using \r\n            \"setCentiseconds(centiseconds + 1)\"\r\n        along with \"setInterval()\" does not work. \r\n\r\n    Why?\r\n        \"setInterval()'s\" closure only ever sees the initial state of \"centiseconds = 0\". Thus, it would repeatedly set\r\n        \"centiseconds = 1\" instead of properly incrementing. \r\n        We can get around this by passing in a function into \"setCentiseconds()\". React has made it so that the function\r\n        is automatically passed the previous state, allowing us to accurately see the most recent value of \"centiseconds\".\r\n    */\r\n    const tick = () => {\r\n        setCentiseconds(centiseconds => centiseconds + 1);\r\n    }\r\n\r\n    const startStop = () => {\r\n        setTicking(!ticking);\r\n    }\r\n\r\n    // Tick if \"ticking = true\"\r\n    useEffect(() => {\r\n        let ticker;\r\n        if (ticking){\r\n            ticker = setInterval(tick, 100);\r\n        }\r\n        return function cleanup(){\r\n            clearInterval(ticker);\r\n        }\r\n    }, [ticking])\r\n\r\n    const displayTime = () => {\r\n        let remainingSeconds = Math.floor(centiseconds / 10);\r\n        \r\n        let seconds = Math.floor(remainingSeconds % 60);\r\n        let remainingMinutes = remainingSeconds / 60;\r\n\r\n        let minutes = Math.floor(remainingMinutes % 60);\r\n        let hours = Math.floor(remainingMinutes / 60);\r\n\r\n        if (hours === 0){\r\n            // Don't display hours when < 1 hr\r\n            if (seconds < 10){\r\n                seconds = '0' + seconds\r\n            }\r\n            return `${minutes}:${seconds}`;\r\n        }else{\r\n            // Only display hours if needed\r\n            if (seconds < 10){\r\n                seconds = '0' + seconds\r\n            }\r\n    \r\n            if (minutes < 10){\r\n                minutes = '0' + minutes\r\n            }\r\n\r\n            return `${hours}:${minutes}:${seconds}`;\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        setTicking(false);\r\n        setCentiseconds(initialCentiseconds);\r\n    }\r\n\r\n    //\r\n    const logTime = async () => {\r\n        if (currentTarget) {\r\n            // Add worktime to Today through API\r\n            let url = process.env.REACT_APP_API_HOST + '/api/days/' + currentTarget._id;\r\n            let secondsWorked = Math.floor(centiseconds / 10);\r\n            let data = JSON.stringify({\r\n                inputDate: Date.now(),\r\n                workTime: secondsWorked,\r\n                timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n            });\r\n            let options = {\r\n                method: 'POST',\r\n                headers: {'Content-Type':'application/json'},\r\n                body:  data\r\n            };\r\n            let response = await fetchCall(url, options);\r\n            if (response.success){\r\n                // Update local state: target and currentTarget.\r\n                let updatedTarget = response.target;\r\n                setTargets( targets => {\r\n                    let copy = targets.map( target => {\r\n                        if (target._id === updatedTarget._id){\r\n                            return updatedTarget;\r\n                        }else{\r\n                            return target;\r\n                        }\r\n                    });\r\n                    return copy;\r\n                });\r\n                setCurrentTarget(updatedTarget);\r\n\r\n            }else{\r\n                // Todo: Responsive Error Message to User\r\n                alert('The server was unable to process your request.')\r\n            }\r\n        }else{\r\n            // Tell user a target must be selected in order to add time.\r\n            alert('A Target must be selected from the dropdown.')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={timerStyle}>\r\n            <div>\r\n                Time: {displayTime()}\r\n            </div>\r\n            <div>\r\n                <ButtonGroup>\r\n                    <Button variant='secondary' onClick={startStop}>{ticking ? 'Stop': 'Start'}</Button>\r\n                    <Button variant='secondary' onClick={reset}>Reset</Button>\r\n                    <Button variant='primary' onClick={logTime}>Log</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Stopwatch;","import React, { useState } from 'react';\r\nimport { Form, Button, Modal } from 'react-bootstrap';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nimport usePositiveIntegerInput from '../hooks/usePositiveIntegerInput';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nfunction CustomizePomodoroModal({ setStartingWorkCentiseconds, setStartingRestCentiseconds }) {\r\n    // State logic\r\n    let minuteWorkSettings = {\r\n        placeholder: 'i.e. 25'\r\n    }\r\n    let minuteRestSettings = {\r\n        placeholder: 'i.e. 5'\r\n    }\r\n    const [minuteWorkValue, minuteWorkInput] = usePositiveIntegerInput(minuteWorkSettings);\r\n    const [minuteRestValue, minuteRestInput] = usePositiveIntegerInput(minuteRestSettings);\r\n\r\n    const setCustomIntervals = () => {\r\n        // Need to convert the user input from minutes -> centiseconds and handle blank input\r\n        let workStartTime;\r\n        let restStartTime;\r\n        if (minuteWorkValue === '' || minuteWorkValue <= 0 || minuteWorkValue > 1440) {\r\n            // Default to 25 minutes work in case of malformed input\r\n            workStartTime = 10 * 60 * 25;\r\n        } else {\r\n            workStartTime = minuteWorkValue * 60 * 10;\r\n        }\r\n\r\n        if (minuteRestValue === '' || minuteRestValue <= 0 || minuteRestValue > 1440) {\r\n            // Default to 5 minutes rest in case of malformed input\r\n            restStartTime = 10 * 60 * 5;\r\n        } else {\r\n            restStartTime = minuteRestValue * 60 * 10;\r\n        }\r\n\r\n        setStartingWorkCentiseconds(workStartTime);\r\n        setStartingRestCentiseconds(restStartTime);\r\n    }\r\n\r\n\r\n\r\n    // Modal Logic\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => {\r\n        setShow(true);\r\n    };\r\n\r\n    return (\r\n        <>  \r\n            <SettingsIcon data-tip='Customize Intervals' data-place='right' className='icon' onClick={handleShow} />\r\n\r\n\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                keyboard={false}\r\n                animation={false}   // Must set animation to false. Otherwise, react-bootstrap throws a deprecation warning.\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Customize Pomodoro Intervals</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form className='custom-pomodoro-form'>\r\n                        <Form.Group>\r\n                            <Form.Label>Work Time (minutes)</Form.Label>\r\n                            {minuteWorkInput}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Rest Time (minutes)</Form.Label>\r\n                            {minuteRestInput}\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={setCustomIntervals}>Confirm</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CustomizePomodoroModal;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { fetchCall } from '../utils';\r\nimport { Button, ButtonGroup } from 'react-bootstrap';\r\nimport CustomizePomodoroModal from '../modals/CustomizePomodoroModal';\r\n\r\nconst PomodoroTimer = ({ setTargets, currentTarget, setCurrentTarget, timer, selectedTimerTargetId }) => {\r\n    let timerStyle = { display: 'none' };\r\n    if (timer === 'Pomodoro') {\r\n        timerStyle = { display: 'block' }\r\n    }\r\n    const [startingWorkCentiseconds, setStartingWorkCentiseconds] = useState(10 * 5);\r\n    const [startingRestCentiseconds, setStartingRestCentiseconds] = useState(10 * 3);\r\n\r\n    const [centiseconds, setCentiseconds] = useState(startingWorkCentiseconds);\r\n    const [ticking, setTicking] = useState(false);\r\n    const [isWorkMode, setIsWorkMode] = useState(true);\r\n\r\n    const tick = () => {\r\n        setCentiseconds(centiseconds => centiseconds - 1);\r\n    }\r\n\r\n    const startStop = () => {\r\n        setTicking(ticking => !ticking);\r\n    }\r\n\r\n    // On timer completion, toggle workMode, reset time, pause\r\n    useEffect(() => {\r\n        const addTimeToAPI = async () => {\r\n            if (selectedTimerTargetId) {\r\n                // Add worktime to Today through API\r\n                let url = process.env.REACT_APP_API_HOST + '/api/days/' + selectedTimerTargetId;\r\n                let secondsWorked = Math.floor(startingWorkCentiseconds / 10);\r\n                let data = JSON.stringify({\r\n                    inputDate: Date.now(),\r\n                    workTime: secondsWorked,\r\n                    timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n                });\r\n                let options = {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type':'application/json'},\r\n                    body:  data\r\n                };\r\n                let response = await fetchCall(url, options);\r\n                if (response.success){\r\n                    // Update local state: target and currentTarget.\r\n                    let updatedTarget = response.target;\r\n                    setTargets( targets => {\r\n                        let copy = targets.map( target => {\r\n                            if (target._id === updatedTarget._id){\r\n                                return updatedTarget;\r\n                            }else{\r\n                                return target;\r\n                            }\r\n                        });\r\n                        return copy;\r\n                    });\r\n\r\n                    // Shift focus onto the Target one has just added time to\r\n                    setCurrentTarget(updatedTarget);\r\n\r\n                }else{\r\n                    // Todo: Responsive Error Message to User\r\n                    alert('The server was unable to process your request.')\r\n                }\r\n            }\r\n        }\r\n\r\n        if (centiseconds === 0) {\r\n            if (isWorkMode) {\r\n                addTimeToAPI();\r\n                setCentiseconds(startingRestCentiseconds);\r\n\r\n            } else {\r\n                setCentiseconds(startingWorkCentiseconds);\r\n            }\r\n\r\n            setIsWorkMode(!isWorkMode);\r\n            setTicking(false);\r\n        }\r\n    }, [centiseconds, isWorkMode, startingRestCentiseconds, startingWorkCentiseconds, setTargets, currentTarget, setCurrentTarget, selectedTimerTargetId]);\r\n\r\n    // Tick if \"ticking = true\"\r\n    useEffect(() => {\r\n        let ticker;\r\n        if (ticking) {\r\n            ticker = setInterval(tick, 100);\r\n        }\r\n        return function cleanup() {\r\n            clearInterval(ticker);\r\n        }\r\n    }, [ticking])\r\n\r\n    const displayTime = () => {\r\n        let remainingSeconds = Math.floor(centiseconds / 10);\r\n\r\n        let seconds = Math.floor(remainingSeconds % 60);\r\n        let remainingMinutes = remainingSeconds / 60;\r\n\r\n        let minutes = Math.floor(remainingMinutes % 60);\r\n        let hours = Math.floor(remainingMinutes / 60);\r\n\r\n        if (hours === 0) {\r\n            // Don't display hours when < 1 hr\r\n            if (seconds < 10) {\r\n                seconds = '0' + seconds\r\n            }\r\n            return `${minutes}:${seconds}`;\r\n        } else {\r\n            // Only display hours if needed\r\n            if (seconds < 10) {\r\n                seconds = '0' + seconds\r\n            }\r\n\r\n            if (minutes < 10) {\r\n                minutes = '0' + minutes\r\n            }\r\n\r\n            return `${hours}:${minutes}:${seconds}`;\r\n        }\r\n    }\r\n\r\n    /** Completely reset to initial state in work mode\r\n     *      - Wrapped in useCallback() to prevent infinite rerenders according to ESLint.\r\n     */\r\n    const reset = useCallback(() => {\r\n        setTicking(false);\r\n        setIsWorkMode(true);\r\n        setCentiseconds(startingWorkCentiseconds);\r\n    }, [startingWorkCentiseconds])\r\n\r\n    /** If the user inputs custom work/rest intervals, completely reset the timer to immediately reflect changes.\r\n     * \r\n     */\r\n    useEffect(() => {\r\n        reset();\r\n    }, [startingRestCentiseconds, startingWorkCentiseconds, reset])\r\n\r\n    return (\r\n        <div style={timerStyle}>\r\n            <div>\r\n                <div>Mode: {isWorkMode ? 'Work 🍞' : 'Rest ☕'}</div>\r\n                <div>{displayTime()}</div>\r\n            </div>\r\n            <div>\r\n                <ButtonGroup>\r\n                    <Button onClick={startStop} value={ticking ? 'Stop' : 'Start'}>{ticking ? 'Stop' : 'Start'}</Button>\r\n                    <Button onClick={reset}>Reset</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n            {/* <CustomPomodoroForm\r\n                setStartingWorkCentiseconds={setStartingWorkCentiseconds}\r\n                setStartingRestCentiseconds={setStartingRestCentiseconds}\r\n            /> */}\r\n            <CustomizePomodoroModal\r\n                setStartingWorkCentiseconds={setStartingWorkCentiseconds}\r\n                setStartingRestCentiseconds={setStartingRestCentiseconds}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PomodoroTimer;\r\n\r\n\r\n/**\r\n * Implementing this gave me quite a headache.\r\n * I wanted to alter state when the timer reached 0. I spend an hour or so trying to shove this logic into 'tick()', which\r\n * is repeatedly called by \"setInterval()\". The first issue is that \"setInterval()\" is a closure that only ever sees the very initial values\r\n * of the various states, which I got around by using a functional update (Passing in an arrow function).\r\n *\r\n * TLDR:\r\n *  - It seems I should never call a \"setState()\" within another \"setState\"\r\n *  - The React Docs explicitly state that timers should use \"useEffect()\" to keep track of time to avoid weird bugs.\r\n *    I altered my code to do so and it is much cleaner as well now.\r\n */","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nconst TimerTargetSelect = ({ targets, selectedTimerTargetId, setSelectedTimerTargetId }) => {\r\n    const {loggedIn} = useContext(AuthContext);\r\n\r\n    const [options, setOptions] = useState([]);\r\n\r\n    // Generate an option for each target\r\n    useEffect(() => {\r\n        if (targets) {\r\n            let optionHTML = targets.map(target => {\r\n                return (\r\n                    <option key={uuidv4()} value={target._id}>{target.title}</option>\r\n                )\r\n            });\r\n            setOptions(optionHTML);\r\n        }\r\n    }, [targets])\r\n\r\n    const handleChange = (e) => {\r\n        console.log('Change');\r\n        setSelectedTimerTargetId(e.target.value);\r\n    }\r\n\r\n    if (targets) {\r\n        return (\r\n            <Form.Group controlId=\"target-timer-select\">\r\n                <Form.Control as=\"select\" onChange={handleChange} value={selectedTimerTargetId}>\r\n                    {options}\r\n                </Form.Control>\r\n            </Form.Group>\r\n        )\r\n    } else if (loggedIn) {\r\n        return (\r\n            <div>Loading...</div>\r\n        )\r\n    } else{\r\n        return '';\r\n    }\r\n\r\n}\r\n\r\nexport default TimerTargetSelect;","import React, { useReducer, useState } from 'react';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport '../css/TimerDisplay.css'\r\nimport Stopwatch from './Stopwatch';\r\nimport PomodoroTimer from './PomodoroTimer';\r\nimport TimerTargetSelect from './TimerTargetSelect';\r\n\r\nconst timerReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'Pomodoro':\r\n            return 'Pomodoro';\r\n        case 'Stopwatch':\r\n            return 'Stopwatch';\r\n        default:\r\n            throw new Error('Unrecognized Timer Type');\r\n    }\r\n}\r\n\r\nconst TimerDisplay = ({ targets, setTargets, currentTarget, setCurrentTarget }) => {\r\n    const [timer, dispatch] = useReducer(timerReducer, 'Pomodoro');\r\n    const [selectedTimerTargetId, setSelectedTimerTargetId] = useState('');\r\n\r\n    if (selectedTimerTargetId === null) {\r\n        if (targets && targets.length > 0) {\r\n            setSelectedTimerTargetId(targets[0]._id);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='timer-display-wrapper'>\r\n            <ReactTooltip />\r\n            <h4>Timers:</h4>\r\n            <div className='timer-content-wrapper'>\r\n                <div>\r\n                    <img data-tip='Pomodoro' data-place='right' className='icon' onClick={() => dispatch({ type: 'Pomodoro' })} style={{ height: '20px', width: '20px' }} src={require('../static/tomato.svg')} alt='Tomato icon. On click leads to Pomodoro Timer.' />\r\n                    <TimerIcon data-tip='Stopwatch' data-place='right' className='icon' onClick={() => dispatch({ type: 'Stopwatch' })} />\r\n                </div>\r\n                <div className='timer-display'>\r\n                    <TimerTargetSelect targets={targets} selectedTimerTargetId={selectedTimerTargetId} setSelectedTimerTargetId={setSelectedTimerTargetId} />\r\n                    <div className='timer-current'>{timer}</div>\r\n                    <PomodoroTimer selectedTimerTargetId={selectedTimerTargetId} selectedTar setTargets={setTargets} currentTarget={currentTarget} setCurrentTarget={setCurrentTarget} timer={timer} />\r\n                    <Stopwatch selectedTimerTargetId={selectedTimerTargetId} setTargets={setTargets} currentTarget={currentTarget} setCurrentTarget={setCurrentTarget} timer={timer} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default TimerDisplay;","import React, { useState } from 'react';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport { fetchCall } from '../utils';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\nconst footerStyling = {\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n}\r\n\r\nfunction TargetEditModal({setTargets, _id, title, notes, weeklyTargetTime }) {\r\n    // State logic\r\n    const [titleInput, setTitleInput] = useState(title);\r\n    const [notesInput, setNotesInput] = useState(notes);\r\n    const [weeklyTargetTimeInput, setWeeklyTargetTimeInput] = useState(weeklyTargetTime);\r\n\r\n    const [success, setSuccess] = useState(null);\r\n\r\n\r\n    // API Response message\r\n    let feedback = null;\r\n    if (success === true){\r\n        feedback = <div style={{color: 'green'}}>Target Successfully altered.</div>\r\n    }else if (success === false){\r\n        feedback = <div style={{color: 'red'}}>Failed to alter Target.</div>\r\n    }\r\n\r\n    const handleEdits = async (e) => {\r\n        e.preventDefault();\r\n\r\n        let url = process.env.REACT_APP_API_HOST + '/api/targets/' + _id;\r\n        let data = JSON.stringify({\r\n            title: titleInput,\r\n            notes: notesInput,\r\n            weeklyTargetTime: weeklyTargetTimeInput\r\n        });\r\n        let options = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: data\r\n        }\r\n        let response = await fetchCall(url, options);\r\n        console.log('Edit Target response :>> ', response);\r\n\r\n        // Update local state. Create a copy to trigger rerender. Replace the edited target.\r\n        if (response.success) {\r\n            setSuccess(true);\r\n            setTargets(targets => {\r\n                let copy = targets.map( target => {\r\n                    if (target._id === _id){\r\n                        return response.target;\r\n                    }else{\r\n                        return target;\r\n                    }\r\n                })\r\n                return copy;\r\n            });\r\n        }else{\r\n            setSuccess(false);\r\n        }\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        let url = process.env.REACT_APP_API_HOST + '/api/targets/' + _id;\r\n        let options = {\r\n            method: 'DELETE'\r\n        }\r\n        let response = await fetchCall(url, options);\r\n        console.log('Delete Target response :>> ', response);\r\n\r\n        // Filter out the deleted target locally.\r\n        if (response.success){\r\n            setSuccess(true);\r\n            setTargets(targets => targets.filter(target => target._id !== _id));\r\n        }else{\r\n            setSuccess(false);\r\n        }\r\n    }\r\n\r\n    // Modal Logic\r\n    const [show, setShow] = useState(false);\r\n\r\n    // Reset the values to the original props after closing\r\n    const handleClose = () => {\r\n        setTitleInput(title);\r\n        setNotesInput(notes);\r\n        setWeeklyTargetTimeInput(weeklyTargetTime);\r\n        setShow(false);\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <ReactTooltip/>\r\n            <EditOutlinedIcon className='icon' data-tip='Edit Target' data-place='right' onClick={handleShow} fontSize='small'/>\r\n\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                keyboard={false}\r\n                animation={false}   // Must set animation to false. Otherwise, react-bootstrap throws a deprecation warning.\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Target View</Modal.Title>\r\n                </Modal.Header>\r\n                <Form onSubmit={handleEdits}>\r\n                    <Modal.Body>\r\n\r\n                        <Form.Group controlId=\"formTargetTitle\">\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control type=\"text\" defaultValue={titleInput} onChange={(e) => setTitleInput(e.target.value)} />\r\n                            <Form.Text className='text-muted'>*required</Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formTargetNotes\">\r\n                            <Form.Label>Notes</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows=\"3\" defaultValue={notesInput} onChange={(e) => setNotesInput(e.target.value)} />\r\n                        </Form.Group>\r\n\r\n                        {/* Perhaps change to text input for better input filtering */}\r\n                        <Form.Group controlId=\"formWeeklyTargetTime\">\r\n                            <Form.Label>Weekly Target Time (hrs)</Form.Label>\r\n                            <Form.Control type=\"number\" defaultValue={weeklyTargetTimeInput} onChange={(e) => setWeeklyTargetTimeInput(e.target.value)} />\r\n                            <Form.Text className='text-muted'>*required. Must be &ge; 0</Form.Text>\r\n                        </Form.Group>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer style={footerStyling}>\r\n                        <ReactTooltip/>\r\n                        <Button variant='danger' data-tip='Delete Target Forever' data-place='bottom' onClick={handleDelete}>\r\n                            <DeleteForeverIcon  />\r\n                        </Button>\r\n\r\n                        {feedback}\r\n\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Save Changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n\r\n                </Form>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TargetEditModal;","import React, { useState, useContext } from 'react';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport {fetchCall} from '../utils';\r\nimport {AuthContext} from '../contexts/AuthContext';\r\n\r\nfunction TargetCreateModal({targets, setTargets, setCurrentTarget}) {\r\n    const { loggedIn } = useContext(AuthContext);\r\n    \r\n\r\n    // Form Logic\r\n    const [titleInput, setTitleInput] = useState('');\r\n    const [notesInput, setNotesInput] = useState('');\r\n    const [weeklyTargetTimeInput, setWeeklyTargetTimeInput] = useState(null);  // Should be an integer >= 1\r\n    const [success, setSuccess] = useState(null);\r\n\r\n\r\n    // API Response message\r\n    let feedback = null;\r\n    if (success === true){\r\n        feedback = <div style={{color: 'green'}}>Target Created Successfully</div>\r\n    }else if (success === false){\r\n        feedback = <div style={{color: 'red'}}>Failed to create target. Title and Weekly Target Time are required.</div>\r\n    }\r\n\r\n    const handleCreate = async (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n        let url = process.env.REACT_APP_API_HOST + '/api/targets';\r\n        let data = JSON.stringify({\r\n            title: titleInput,\r\n            notes: notesInput,\r\n            weeklyTargetTime: weeklyTargetTimeInput\r\n        });\r\n        let options = {\r\n            method: 'POST',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: data\r\n        }\r\n        let response = await fetchCall(url, options);\r\n        console.log('Create Target response :>> ', response);\r\n        if (response.success) {\r\n            // push the returned target onto a copy to trigger rerender\r\n            setSuccess(true);\r\n\r\n            \r\n\r\n            setTargets(targets => {\r\n                let copy = targets.map(target => target);\r\n                copy.push(response.target);\r\n\r\n                // If the user has 0 targets, setCurrentTarget to the one entry\r\n                if (targets.length == 0){\r\n                    console.log('targets.length :>> ', targets.length);\r\n                    setCurrentTarget(copy[0]);\r\n                }\r\n                return copy;\r\n            });\r\n            \r\n        }else{\r\n            // Todo: Tell the user if an error occurs with something red.\r\n            setSuccess(false);\r\n        }\r\n    }\r\n\r\n    // Modal Logic\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setSuccess(false);\r\n        setShow(false)\r\n    };\r\n    const handleShow = () => {\r\n        if (loggedIn){  \r\n            setShow(true)\r\n        }\r\n        else{\r\n            console.log('bruh :>>');\r\n            alert('Please Login First');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <AddIcon data-tip='Add Target' data-place='right' onClick={handleShow} className='icon'/>\r\n\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                keyboard={false}\r\n                animation={false}   // Must set animation to false. Otherwise, react-bootstrap throws a deprecation warning.\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create Target</Modal.Title>\r\n                </Modal.Header>\r\n                <Form onSubmit={handleCreate}>\r\n                    <Modal.Body>\r\n\r\n                        <Form.Group controlId=\"formTargetTitle\">\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control placeholder='Name of Target' required type=\"text\" defaultValue={titleInput} onChange={(e) => setTitleInput(e.target.value)} />\r\n                            <Form.Text className='text-muted'>*required</Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formTargetNotes\">\r\n                            <Form.Label>Notes</Form.Label>\r\n                            <Form.Control placeholder='Additional text about your target' as=\"textarea\" rows=\"3\" defaultValue={notesInput} onChange={(e) => setNotesInput(e.target.value)} />\r\n                        </Form.Group>\r\n\r\n                        {/* Perhaps change to text input for better input filtering */}\r\n                        <Form.Group controlId=\"formWeeklyTargetTime\">\r\n                            <Form.Label>Weekly Target Time (hrs)</Form.Label>\r\n                            <Form.Control placeholder='i.e. 3' required type=\"number\" defaultValue={weeklyTargetTimeInput} onChange={(e) => setWeeklyTargetTimeInput(e.target.value)} />\r\n                            <Form.Text className='text-muted'>*required. Must be &ge; 0</Form.Text>\r\n                        </Form.Group>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        {feedback}\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Create\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TargetCreateModal;","import React, { useCallback } from 'react';\r\nimport { Form, Col } from 'react-bootstrap';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport TargetEditModal from '../modals/TargetEditModal';\r\nimport TargetCreateModal from '../modals/TargetCreateModal';\r\nimport { useEffect, useState } from 'react';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nconst TargetSelect = ({ currentTarget, setCurrentTarget, targets, setTargets }) => {\r\n    let [targetEntries, setTargetEntries] = useState(null);\r\n\r\n    // Keep track of the most recently clicked target.\r\n    const selectTarget = useCallback((e) => {\r\n        let targetId = e.target.dataset.targetid;\r\n        \r\n        let chosenTarget = null;\r\n        for (let i = 0; i < targets.length; i++) {\r\n            const target = targets[i];\r\n            if (target._id === targetId){\r\n                chosenTarget = target;\r\n                break;\r\n            }\r\n        }\r\n\r\n        setCurrentTarget(chosenTarget);\r\n    }, [setCurrentTarget, targets]);\r\n\r\n\r\n    // Generate JSX based on every target. We need to create both the checkboxes and their edit forms\r\n    const generateJSX = useCallback((targets) => {\r\n        // Only generate checkboxes if targets is not null\r\n        if (!targets) {\r\n            return []\r\n        }\r\n\r\n        // Construct two parallel arrays: one for the editForms, another for the checkboxes\r\n        let editForms = targets.map(target => {\r\n            let _id = target._id;\r\n            let title = target.title;\r\n            let notes = target.notes;\r\n            let weeklyTargetTime = target.weeklyTargetTime;\r\n            return <TargetEditModal setTargets={setTargets} key={uuidv4()} _id={_id} title={title} notes={notes} weeklyTargetTime={weeklyTargetTime} />\r\n        });\r\n\r\n        let checkBoxIndex = 0;\r\n        if (currentTarget){\r\n            // iterate through the checkboxes to find the one that matches. Mark it as checked.\r\n            let currentTargetId = currentTarget._id;\r\n            for (let i = 0; i < targets.length; i++) {\r\n                const target = targets[i];\r\n                if (currentTargetId === target._id){\r\n                    checkBoxIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let checkboxes = targets.map((target, index) => {\r\n            let defaultProps = {\r\n                key: uuidv4(),\r\n                type: 'radio',\r\n                label: target.title,\r\n                name: 'targetRadios',\r\n                id: `targetRadios-${index + 1}`,\r\n                onClick: selectTarget,\r\n            }\r\n            if (index === checkBoxIndex) {\r\n                return (\r\n                    <Form.Check\r\n                        {...defaultProps}\r\n                        data-targetid={target._id}\r\n\r\n                        defaultChecked = 'true'\r\n                    />\r\n                )\r\n            } else {\r\n                return (\r\n                    <Form.Check\r\n                        {...defaultProps}\r\n                        data-targetid={target._id}\r\n                    />\r\n                )\r\n            }\r\n        });\r\n\r\n        // Wrap them together with some styling\r\n        let combined = checkboxes.map((checkbox, index) => {\r\n            const form = editForms[index];\r\n\r\n            return (\r\n                <div key={uuidv4()} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    {checkbox}\r\n                    {form}\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return combined;\r\n    }, [selectTarget, setTargets, currentTarget])\r\n\r\n    // const checkboxes = generateJSX(targets);\r\n\r\n    // Only generate target select list if targets is rerendered\r\n    useEffect(() => {\r\n        setTargetEntries(generateJSX(targets));\r\n    }, [targets, generateJSX]);\r\n\r\n    return (\r\n        <Form>\r\n            <fieldset>\r\n                <Form.Group>\r\n                    <Form.Label as=\"legend\" style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n                        <div>Targets:</div>\r\n                        <TargetCreateModal targets={targets} setTargets={setTargets} setCurrentTarget={setCurrentTarget}/>\r\n\r\n                    </Form.Label>\r\n                    <Col sm={15}>\r\n                        {targetEntries}\r\n                    </Col>\r\n                </Form.Group>\r\n            </fieldset>\r\n        </Form>\r\n\r\n    );\r\n}\r\n\r\nexport default TargetSelect;","import React from 'react';\r\n\r\nimport '../css/Sidebar.css'\r\nimport TimerDisplay from './TimerDisplay';\r\nimport TargetSelect from './TargetSelect';\r\n\r\nconst Sidebar = ({ currentTarget, setCurrentTarget, targets, setTargets }) => {\r\n    return (\r\n        <aside>\r\n            <div className='goals-wrapper'>\r\n                {/* Todo: delete goals-header Only meant for debugging purposes. */}\r\n                <div>Active View: {currentTarget ? currentTarget.title : 'None'}</div>\r\n                <TargetSelect currentTarget={currentTarget} setCurrentTarget={setCurrentTarget} targets={targets} setTargets={setTargets}/>\r\n            </div>\r\n            <hr></hr>\r\n            <TimerDisplay targets={targets} setTargets={setTargets} setCurrentTarget={setCurrentTarget} currentTarget={currentTarget}/>\r\n            {/* <footer>\r\n                <div>Tomato Icon made by <a href=\"https://www.flaticon.com/authors/icongeek26\" title=\"Icongeek26\">Icongeek26</a></div>\r\n            </footer> */}\r\n        </aside>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React, { useState } from 'react';\r\nimport { Button, Modal, Form } from 'react-bootstrap';\r\nimport {fetchCall} from '../utils'; \r\nimport { useContext, useEffect } from 'react';\r\nimport {AuthContext} from '../contexts/AuthContext';\r\n\r\n\r\nfunction LoginModal() {\r\n    const {setLoggedIn} = useContext(AuthContext);\r\n\r\n    // Form Logic\r\n    const [username, setUsername] = useState('test');       // To-Do: Change these default values to ''\r\n    const [password, setPassword] = useState('password');\r\n    const [success, setSuccess] = useState(null);\r\n\r\n\r\n    // API Response message\r\n    let feedback = null;\r\n    if (success === true){\r\n        feedback = <div style={{color: 'green'}}>Login Successful</div>\r\n    }else if (success === false){\r\n        feedback = <div style={{color: 'red'}}>Login Failed. Likely invalid username or password.</div>\r\n    }\r\n\r\n    // Modal Logic\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setSuccess(null);\r\n        setShow(false)\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n    const handleLogin = async () => {\r\n        let url = process.env.REACT_APP_API_HOST + '/api/login';\r\n        let body = JSON.stringify({\r\n            username: username,\r\n            password: password\r\n        });\r\n        let options = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: body,\r\n        }\r\n        let json = await fetchCall(url, options);\r\n        if (json.loggedIn){\r\n            setSuccess(true);\r\n            setLoggedIn(true);\r\n        }else{\r\n            setSuccess(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>  \r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                Login\r\n            </Button>\r\n\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                keyboard={false}\r\n                animation={false}   // Must set animation to false. Otherwise, react-bootstrap throws a deprecation warning.\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Login</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group controlId='login-form-username'>\r\n                            <Form.Label>Username</Form.Label>\r\n                            <Form.Control type='text' value={username} onChange={(e) => { setUsername(e.target.value) }}/>\r\n                        </Form.Group>\r\n                        <Form.Group controlId='login-form-password'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type='text' value={password} onChange={(e) => { setPassword(e.target.value) }}/>\r\n                        </Form.Group>\r\n\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    {feedback}\r\n                    <Button variant=\"primary\" onClick={handleLogin}>Login</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoginModal;","import React, { useState } from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport {fetchCall} from '../utils'; \r\n\r\nfunction RegisterModal() {\r\n    // Form Logic\r\n    const [username, setUsername] = useState('');      \r\n    const [password, setPassword] = useState('');\r\n    const [success, setSuccess] = useState(null);\r\n\r\n    let feedback = null;\r\n    if (success === true){\r\n        feedback = <div style={{color: 'green'}}>Registration Successful</div>\r\n    }else if (success === false){\r\n        feedback = <div style={{color: 'red'}}>Registration Failed. Likely username is already taken.</div>\r\n    }\r\n\r\n    // Modal Logic\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setSuccess(null);\r\n        setShow(false);\r\n    };\r\n    const handleShow = () => {setShow(true)};\r\n\r\n\r\n    const handleRegistration = async () => {\r\n        let url = process.env.REACT_APP_API_HOST + '/api/register';\r\n        let data = JSON.stringify({\r\n            username: username,\r\n            password: password\r\n        });\r\n        let options = {\r\n            method: 'POST',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: data\r\n        }\r\n        let json = await fetchCall(url, options);\r\n        // To-Do: Integrate loading into callFetch\r\n        if (json.success){\r\n            console.log('Successfully Registered', json);\r\n            setSuccess(true);\r\n        }else{\r\n            setSuccess(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>  \r\n            <Button variant=\"secondary\" onClick={handleShow}>\r\n                Register\r\n            </Button>\r\n\r\n            <Modal\r\n                show={show}\r\n                onHide={handleClose}\r\n                keyboard={false}\r\n                animation={false}   // Must set animation to false. Otherwise, react-bootstrap throws a deprecation warning.\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Register</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form>\r\n                        <div>\r\n                            <label htmlFor=\"register-form-username\">Username:</label><br/>\r\n                            <input type='text' value={username} onChange={(e) => { setUsername(e.target.value) }} id='register-form-username' />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"register-form-password\">Password:</label><br/>\r\n                            <input type='text' value={password} onChange={(e) => { setPassword(e.target.value) }} id='register-form-password'/>\r\n                        </div>\r\n                    </form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    {feedback}\r\n                    <Button variant=\"primary\" onClick={handleRegistration}>Register</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RegisterModal;","import React, { useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport LoginModal from '../modals/LoginModal';\r\nimport RegisterModal from '../modals/RegisterModal';\r\nimport { fetchCall } from '../utils';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst AccountButtons = ({setTargets, setCurrentTarget}) => {\r\n    const { loggedIn, setLoggedIn } = useContext(AuthContext);\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            // API Call to logout\r\n            let url = process.env.REACT_APP_API_HOST + \"/api/logout\";\r\n            let options = { method: 'POST' };\r\n            let respJSON = await fetchCall(url, options);\r\n\r\n            // Set state to logged out if API call returns successful\r\n            if (respJSON.success) {\r\n                setTargets(null);\r\n                setCurrentTarget(null);\r\n                setLoggedIn(false);\r\n                \r\n            }else{\r\n                // Error Message\r\n                alert('Logout Failed');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {loggedIn ?\r\n                <Button variant='secondary' onClick={handleLogout}>Logout</Button>\r\n                :\r\n                (<><LoginModal /><RegisterModal /></>)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AccountButtons;","import React, { useState } from 'react';\r\nimport { useEffect, useContext } from 'react';\r\nimport { numToMonth, getMonth, fetchCall } from '../utils';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n\r\nimport Weeks from './Weeks';\r\nimport Sidebar from './Sidebar';\r\nimport '../css/Layout.css';\r\nimport '../css/Icon.css';\r\nimport AccountButtons from './AccountButtons';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\n/** Month Component: Note that Date Objects use 0-11 to describe months. This is unintuitive so \r\n * \r\n */\r\nconst Layout = () => {\r\n    // API Handling and API State\r\n    const { loggedIn } = useContext(AuthContext);\r\n    const [targets, setTargets] = useState(null);\r\n    const [currentTarget, setCurrentTarget] = useState(null);\r\n\r\n    // Retrieve all data associated with a user when they login\r\n    useEffect(() => {\r\n        const retrieveTargets = async () => {\r\n            if (loggedIn) {\r\n                let url = process.env.REACT_APP_API_HOST + '/api/targets';\r\n                let response = await fetchCall(url);\r\n                console.log('Layout Component - Retrieve All Targets :>> ', response);\r\n                if (response.success) {\r\n                    setTargets(response.targets);\r\n                    // Set currentTargetId to the very first item in targets if any exist.\r\n                    if (response.targets.length > 0) {\r\n                        setCurrentTarget(response.targets[0]);\r\n                    }\r\n                }else{\r\n                    alert('Unable to retrieve Targets of the User.')\r\n                }\r\n            }\r\n        }\r\n\r\n        retrieveTargets();\r\n    }, [loggedIn, setTargets]);\r\n\r\n    // Non API-Dependent Logic\r\n    // Handle the date. Default view is on the current month.\r\n    let today = new Date();\r\n    today.setDate(1);\r\n    const [date, setDate] = useState(today);\r\n\r\n    const prevMonth = (e) => {\r\n        setDate(new Date(date.getFullYear(), date.getMonth() - 1, 1));\r\n    }\r\n\r\n    const nextMonth = (e) => {\r\n        setDate(new Date(date.getFullYear(), date.getMonth() + 1, 1));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ReactTooltip />\r\n            <main>\r\n                <header>\r\n                    <div className='logo'>Track.</div>\r\n\r\n                    <div className='month-view-header'>\r\n                        <div className='month-year-header'>\r\n                            {numToMonth(date.getMonth() + 1)} {date.getFullYear()}\r\n                        </div>\r\n                        <div>\r\n                            <KeyboardArrowLeftIcon data-tip='Previous Month' data-place='bottom' className='icon' onClick={prevMonth} />\r\n                            <KeyboardArrowRightIcon data-tip='Next Month' data-place='bottom' className='icon' onClick={nextMonth} />\r\n                        </div>\r\n                        <div>\r\n                            <Button variant=\"outline-dark\" onClick={() => setDate(today)}>Today</Button>\r\n                        </div>\r\n                        <div>\r\n                            <AccountButtons setCurrentTarget={setCurrentTarget} setTargets={setTargets}/>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n\r\n                <Sidebar\r\n                    currentTarget={currentTarget}\r\n                    setCurrentTarget={setCurrentTarget}\r\n\r\n                    targets={targets}\r\n                    setTargets={setTargets}\r\n                />\r\n                <Weeks\r\n                    currentTarget={currentTarget}\r\n                    setCurrentTarget={setCurrentTarget}\r\n\r\n                    date={date}\r\n                    viewedMonth={getMonth(date)}\r\n\r\n                    setTargets={setTargets}\r\n                />\r\n            </main>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n\r\n","import React from 'react';\nimport './css/App.css';\nimport Layout from './components/Layout';\nimport AuthContextProvider from './contexts/AuthContext';\n\n// async function test(){\n//     let data = JSON.stringify({num: (new Date()).getTime()});\n//     let response = await fetch('/api/test', {\n//         method: 'POST',\n//         headers: {'Content-Type':'application/json'},\n//         body: data\n//     })\n\n//     let responseJSON = await response.json();\n//     console.log(responseJSON);\n// }\nconsole.log('bruh o boy');\nfunction App() {\n    return (\n        <div className=\"App\">\n            <AuthContextProvider>\n                <Layout />\n            </AuthContextProvider>\n        </div>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}